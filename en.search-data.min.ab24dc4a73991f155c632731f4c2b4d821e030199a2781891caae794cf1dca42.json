[{"id":0,"href":"/docs/1-cv/","title":"...CV","section":"Docs","content":" Formation # (2016-2018) École Nationale Supérieure d’Architecture de Lyon Diplôme d’État en Architecture au grade Master, mention Recherche Nominé en catégorie Recherche pour les Prix de la Jeune Architecture 18’\n(2012-2015) École Nationale Supérieure d’Architecture de Paris Val-de-Seine Diplôme d’État d’Architecte, grade Licence\n(2010-2012) École Polytechnique Universitaire de Paris-Sud Validation des années préparatoires en ingénierie\nExperience professionelle # (2021-2024) MAP/LMGC/LISPEN - Doctorant en Ingénierie Projet MITI-Astragale. Ingénierie des connaissances, modélisation d\u0026rsquo;un système complexe, méthodologie de déploiement d\u0026rsquo;un écosystème avec pour cas d\u0026rsquo;étude le diagnostic structurel d\u0026rsquo;ouvrage bâti en maçonneries de blocs. Prototypage.\n(2019-2021) MAP-GAMSAU | UMR CNRS-MCC 3495 - Chercheur associé Chantier scientifique de Notre-Dame de Paris, co-responsable du projet REPERAGE au sein du GT Numérique, collaborateur pour la prestation d’étude de stabilité des voûtes proposée par le GT Structure. Architecture sémantique et système, modélisation paramétrique d’anastylose et de modèle structurels, élaboration de restitutions d’une structure maçonnée effondrée par optimisation linéaire depuis les hypothèses archéologiques et le dépôt lapidaire correspondant.\n(2019-2021) ENSA Marseille - Maître de Conférence Associé, Sciences et Techniqes pour l\u0026rsquo;Architecture Encadrement du séminaire « Patrimoine et Humanités Numériques » (M1/M2), de l’intensif « Structures légères » (M1/M2). Cours de technologie et analyses des structures (L2), techniques de réhabilitation (M1), en atelier d’architecture (M1), interventions en travaux dirigés.\n(2019-2020) CAUE Rhône Métropole - Chargé de mission Traitement de données et préparation d’une formation sur les commissions préalables Travail de commissariat, constitution de corpus \u0026amp; contenus pour l’exposition 20/21\n(2018-2019) EPFL/ENAC IBOIS - Assistant Professeur \u0026amp; Collaborateur Scientifique Enseignement en atelier d’architecture (M1) et cours « Concevoir les Structures » (L3), prototypage \u0026amp; fabrication numérique, optimisation structurelle.Collaboration et interventions spécifiques sur une variété de projets.\n(2017-2018) MAP-ARIA | UMR CNRS-MCC 3495 - Ingénieur d’études ANR-URBANIA - Reconnaissance automatique d’ouvrages architectureaux sur des maquettes d’architecture patrimoniales (plan-relief) depuis leur acquisition numérique. Reconstruction paramétrique et sémantique de maquettes d’architecture patrimoniales (plan-relief) depuis leur acquisition numérique.\n(2016) EPA Paris Saclay - Chargé de communauté et de communication pour le PROTO204 Au tiers-lieu PROTO204, Management de projets, d’événements et de communautés. Fablab, micro-architecture, CFAO, agriculture urbaine, design graphique.\n(2015) MUOTO Architectes - Stage en agence d’architecture Confection d’un dossier de faisabilité, documents pour deux concours et un DCE.\n(2012) SOFTEAM - Stage en ingénierie informatique Conception collaborative puis implémentation d’un intranet dans le cloud.\nLangues # Français, natif Anglais, C1 (Cambridge Advanced) Espagnol, B2 Compétences informatiques # CAD\u0026amp;3D : Rhino-Grasshopper-Rhinocommon, Blender, CloudCompare, Meshlab, GMSH CAM : CNC, Lasercut, Impression 3D Programmation : Python, C/C++, Html/CSS Système : sysadm Linux, devops, Docker \u0026amp; compose, SQL/SPARQL Centres d\u0026rsquo;intérêt # Théâtre d’improvisation. Savate. Escalade. Piano \u0026amp; Electro. Littérature.\n"},{"id":1,"href":"/docs/2-projets/","title":"..Projets","section":"Docs","content":"wip TOC des projets personnels et professionnels\n"},{"id":2,"href":"/docs/3-cours/","title":".Cours","section":"Docs","content":"Présentation des fiches de cours\n"},{"id":3,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":4,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":5,"href":"/docs/3-cours/cyclescours/","title":"Cycles de cours","section":".Cours","content":"WIP présentation exhaustive des cycles de cours+fiches de cours\n"},{"id":6,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":7,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":8,"href":"/docs/2-projets/2017-18-giuliocamilio/","title":"(2018) ENSAL-Étude du Théâtre de Giulio Camilio","section":"..Projets","content":"Titre du projet : Étude du Théâtre de la Mémoire de Giulio Camilio\nPartenaires : École Nationale Supérieure d\u0026rsquo;Architecture de Lyon (ENSAL) Durée : 6 mois\nRésumé # Dans “Le Théâtre de la Mémoire” écrit par Giulio Camillo (1480-1544), la polysémie du mot Théâtre masque la quête d’un humaniste de la Renaissance Italienne. Cette oeuvre n\u0026rsquo;est pas moins que la tentative de reconstituer l’univers et ses mesures au sein d’un système de mémoire au moyen d\u0026rsquo;images mythologiques, autant de miniatures du Monde. Ce théâtre s’inscrit puise ses origines dans la redécouverte des architectures antiques par les traités de Vitruve et Alberti. Et d\u0026rsquo;autre part, dans l’Art de la Mémoire dit ‘classique’. Cet art est tantôt mystique, tantôt rationnel, toujours mnémotechnique à travers son évolution. L\u0026rsquo;une des méthodes fondatrices consiste à fragmenter un discours et le mettre en dépôt dans un ensemble d’images, puis d’ordonner ces images dans une série de lieux architecturés. Ces opérations sont effectuées en pensée. Le parcours de l\u0026rsquo;individu dans ses lieux traduit le principe fondateur : “Alors, l’ordre des lieux rappelle les choses elles-mêmes”.\nLe travail de Camillo est de transcrire cette mnémotechnique dans le théâtre antique. Il s\u0026rsquo;approprie cette figure en inversant la scène et les gradins : le spectateur placé sur la scène parcourt de ses yeux les gradins où chaque image est mise en spectacle selon son architecte. Ainsi, le Théâtre de Camillo élabore la mutation de l’Art de la Mémoire au cours de la Renaissance sans pour autant la réaliser.\nNous développerons cette étude selon une problématique double. Tout d\u0026rsquo;abord, nous exposerons comment cet audacieux système s’inscrit en continuité de la tradition des ars memoriae, et plus spécifiquement par quelles articulations il en effectue la transformation à la Renaissance. Puis nous étudierons la postérité directe de ce théâtre dans les traités d\u0026rsquo;architecture de l\u0026rsquo;époque, où l\u0026rsquo;on trouvera un lien d\u0026rsquo;amitié et de pensée avec l\u0026rsquo;architecte et théoricien Sébastiano Serlio dont le traité irrigua la théorie de l\u0026rsquo;architecture en Europe.\n"},{"id":9,"href":"/docs/2-projets/2018-optimisationson/","title":"(2018) MAP-Optimisation de l'acoustique d'un espace","section":"..Projets","content":"Titre du projet : Émergence de Morphologies Pour l\u0026rsquo;acoustique Des Espaces de Performance\nPartenaires : Laboratoires Modèles et Simulations pour l\u0026rsquo;Architecture et le Patrimoine (UMR 3495 CNRS/MC MAP), École Nationale Supérieure d’Architecture de Lyon (ENSAL)\nDurée : 6 mois\nRésumé du projet # L’acoustique est un vecteur important de qualité de l’ambiance architecturale dans un espace. Elle est aussi une contrainte forte pour le volume correspondant, dont la maîtrise des altérations pour améliorer la perception sonore n’est pas triviale. Nous proposons un outil d’aide à la décision a priori de la forme architecturale, utilisant un algorithme génétique multicritère couplé à un système de simulation acoustique et de calcul des mesures ISO. Son utilisation permet au concepteur l’émersion de morphologies innovantes et qualitatives, aptes à mettre en espace les visions contemporaines des espaces de performance.\n"},{"id":10,"href":"/docs/2-projets/2019-carto/","title":"(2019) MAP-Cartographie thématique d'un corpus de mémoires d'architecture","section":"..Projets","content":"Titre du projet : Cartographie thématique des mémoires d’architecture niveau Master de l’École Nationale Supérieure d’Architecture de Lyon\nPartenaires : Laboratoires Modèles et Simulations pour l\u0026rsquo;Architecture et le Patrimoine (UMR 3495 CNRS/MC MAP), École Nationale Supérieure d’Architecture de Lyon (ENSAL) Durée : 3 mois\nRésumé du projet # Au cours de ces dernières années, l’exercice du mémoire est devenu un objet clé pour accéder à la pratique du métier d’architecte. C’est une production jeune ou en bourgeonnement, dense, souvent interdisciplinaire, difficile à cerner dûe à la diversité des thèmes abordés au sein de la discipline. Malgré tout, c’est un corpus que l’on qualifierait comme homogène car fédéré autour d’une discipline.\nD’autre part, le traitement automatique du langage - ou Natural Language Processing (NLP) - a connu un essor considérable avec la démocratisation du big data et des ouveaux paradigmes d’apprentissage machine, permettant notamment une représentation du langage plus robuste et plus fine.\nComme expérimentation ancrée dans les humanités numériques, nous proposons d’appliquer ces méthodes sur le corpus formé par les mémoires d’architecture produits à l’ENSAL au cours de l’année 2018, dans le but de proposer une représentation exhaustive des thèmes abordés par les étudiants, puis en faire une synthèse\n"},{"id":11,"href":"/docs/2-projets/2020-22-reperage/","title":"(2020-22) FSP-Repérage","section":"..Projets","content":"Titre du projet : Repérage spatio-temporel des claveaux des nervures des voûtes effondrées de Notre-Dame de Paris\nAcronyme : REPERAGE\nPartenaires : Laboratoires Modèles et Simulations pour l\u0026rsquo;Architecture et le Patrimoine (UMR 3495 CNRS/MC MAP), Laboratoire de Recherche des Monuments Historiques (LRMH), Direction Régionale des Affaires Culturelles section d\u0026rsquo;Archéologie (SRA-DRAC IDF)\nCollaborateurs : Groupes de travail Pierre et Écosystème Numérique du Chantier Scientifique de Notre-Dame de Paris\nPosition : Co-Responsable du projet Financement : FSP - Fondation des Sciences pour le Patrimoine\nDurée : 1 an et demie, étendu à deux ans\nRésumé du projet # L’authenticité et le réemploi des matériaux de construction sont des problématiques centrales lors d’une intervention lourde sur un édifice patrimonial. Dans le cas de la cathédrale Notre-Dame de Paris, l’effondrement de ses voûtes, le 15 avril 2019, a provoqué au sol des amoncellements d’items dont le devenir pose question. Sur ce chantier d’exception, ces items n’ont pas été considérés comme des débris, mais comme des objets à valeur patrimoniale, justifiant une intervention mettant en œuvre les techniques de l’archéologie. C’est la raison pour laquelle leur déblaiement a fait l’objet d’une approche raisonnée et d’une documentation par des prises de vues photographiques. Plus de 50 000 clichés ont été produits, notamment par le Laboratoire de recherche des monuments historiques, le C2RMF, et le Service régional d’Archéologie de la DRAC Ile-de-France.\nCe projet a l’ambition d’introduire une méthode pour faciliter le repérage d’artefacts remarquables à partir d’un corpus de photographies partiellement indexées et le chaînage temporel des différents états et positions de ces éléments. Le cas d’application porte sur les items suivants : les claveaux des nervures des voûtes de la cathédrale Notre-Dame, dans le cadre du suivi scientifique du chantier et de la documentation des premières interventions. Mis en lien avec les techniques numériques du relevé et la restitution géométrique de formes architecturales, ce repérage lie les données sémantiques (archéométriques, historiques, typologiques…) à la position spatiale et temporelle des artefacts dans les nuages de points 3D du chantier de mise en sécurité et de restauration, au fil des interventions.\nRéalisé par des partenaires complémentaires, spécialistes de l’archéométrie, la conservation des monuments historiques, le relevé/modélisation 3D des formes et le développement de systèmes d’informations spatialisées pour la gestion des données patrimoniales, le projet REPERAGE proposera un meilleur suivi des éléments d’un édifice ou d’un objet patrimonial, dans le cas d’une destruction partielle ou totale de ce dernier. Il contribue aux apports scientifiques du chantier Notre-Dame, en harmonie avec les projets de recherche existants, et avec les pratiques actuelles de documentation de la prise en charge chantier de sauvetage post-catastrophe.\nSur le plan scientifique, le projet REPERAGE a permis de mettre à disposition de l’ensemble des données produites aux membres du chantier scientifique Notre-Dame, ainsi qu’à la Maîtrise d’Œuvre du chantier de restauration. L’approche méthodologique innovante du projet est généralisable à d’autres cas d’études.\nSur le plan de la diffusion culturelle, le projet REPERAGE a contribué à la création d’une mallette pédagogique et de valorisation qui mêle à la fois le virtuel et la maquette physique pour représenter au mieux les différents aspects mis en valeur par les chercheurs.\n"},{"id":12,"href":"/docs/2-projets/2020-voutes/","title":"(2020) RNDP-Évaluation de la stabilité mécanique des voûtes de la cathédrale Notre-Dame de Paris","section":"..Projets","content":"Titre du projet : Évaluation de la stabilité mécanique résiduelle au feu des voûtes de la cathédrale Notre-Dame de Paris\nPartenaires : I2M, LMDC-Toulouse, MiMeTICS engineering adossé au LMGC-Montpellier, ENPC-Université Gustave Eiffel, GSA-ENSA Paris-Malaquais, MAP\nCollaborateurs : Groupes de travail Génie Civil et Calcul de Structure et Écosystème Numérique du Chantier Scientifique de Notre-Dame de Paris\nPosition : Responsable du workpackage de la modélisation géométrique Financement : RNDP\nDurée : 6 mois (avec extensions)\nRésumé du projet # Étude réalisées sous la forme d\u0026rsquo;une prestation scientifique et technique réalisé par un consortium de laboratoires , cellule de transfert et startup issus des groupes de travail Génie Civil et Calcul de Structure et Écosystème numérique du Chantier Scientifique.\nCette étude porte sur l\u0026rsquo;évaluation de la stabilité mécanique résiduelle au feu des voûtes de la cathédrale Notre-Dame de Paris en vue de concourir à la phase de diagnostic structurel de la cathédrale mené par la maîtrise d\u0026rsquo;oeuvre.\nEn mobilisant un jeu d\u0026rsquo;hypothèses sur la géométrie des voûtes, des données mécaniques des matériaux et des endommagements provoqués par l\u0026rsquo;incendie, plusieurs type de modèles mécaniques sont mis en oeuvre. Les résultats des différentes modélisations sont confrontés sur la base des critères qui leurs sont communs, et se complètent sur les points qui leurs sont spécifiques.\nContribution # Nous avons encadré et participé à la production des modèles géométriques destinés aux maillages en élément finis et en éléments discrets. Les parties du système structurel couverts par notre étude sont :\nUne voûte sexpartite du choeur et son appui, c\u0026rsquo;est à dire de l\u0026rsquo;arc-boutant à la base de sa culée ; Une voûte sexpartite de la nef et son appui ; Un contrefort du transept. La modélisation en BREP des appuis est effectuée par le dessin manuel des géométries 3D sur le relevé en lasergrammétrie. Une solution optimale en terme de temporalité mais avec un apport faible du point de vue scientifique. Tandis que la modélisation en BREP des voûtes sexpartites est résolue par la génération paramétrique des géométries depuis ce même nuage de points. Cette solution nous a permis un dessin fidèle au relevé, malgré la complexité de la géométrie considérée. En effet, si le dessin d\u0026rsquo;un arc-boutant et de sa culée reste trivial, la géométrie à double courbure des panneaux de voutains d\u0026rsquo;une voûte gothique sexpartite requiert le déploiement d\u0026rsquo;une expertise plus poussée. Que l\u0026rsquo;on considère la méthode de modélisation manuelle ou paramétrique, les modèles produits sont ajustés \u0026ldquo;au plus proche\u0026rdquo; du nuage de points, donc de la mesure initiale.\n"},{"id":13,"href":"/docs/2-projets/2021-24-astragale/","title":"(2021-24) MITI-Astragale","section":"..Projets","content":"Titre du projet : Vers un environnement numérique collaboratif pour l\u0026rsquo;analyse multimodale du comportement des structures\nAcronyme : ASTRAGALE\nPartenaires : Laboratoires Modèles et Simulations pour l\u0026rsquo;Architecture et le Patrimoine (UMR 3495 CNRS/MC, MAP), Laboratoire de Mécanique et de Génie Civil de Montpellier (UMR 5508 CNRS, LMGC), Laboratoire d\u0026rsquo;Ingénierie des Systèmes Physiques et Numériques (EA7515, LISPEN)\nCollaborateurs : Groupes de travail Génie Civil et Calcul de Structure et Écosystème Numérique du Chantier Scientifique de Notre-Dame de Paris\nFinancement : CNRS/MITI - Mission pour les initiatives transverses et interdisciplinaires\nDurée : 3 ans\nRésumé du projet # La sauvegarde du patrimoine bâti, à travers les opérations de conservation-restauration, est aujourd\u0026rsquo;hui communément épaulée par l\u0026rsquo;analyse scientifique ; cela comprend l\u0026rsquo;aspect particulièrement critique de son évaluation structurelle. La stabilité et l\u0026rsquo;état des composants sont appréciés par les sciences des matériaux et du génie civil, dont les études sont épaulées par l\u0026rsquo;archéométrie ou l\u0026rsquo;histoire de l\u0026rsquo;art.\nL\u0026rsquo;aspect collaboratif de telles études et leurs références constantes à des éléments de relevés architecturaux est une évidence, qui s\u0026rsquo;illustre au sein du chantier scientifique de la cathédrale Notre-Dame de Paris et dont font partie les laboratoires partenaires du présent projet : les laboratoires MAP (GT Écosystème Numérique) et LMGC (GT Structure). Ils sont impliqués dans des projets propres à leurs disciplines comme l\u0026rsquo;écosystème nDame ou l\u0026rsquo;ANR DEMMEFI (dégradations structurelles dues au feu), ou interdisciplinaires comme le projet REPERAGE (MAP/LRMH/SRA). Le corpus d\u0026rsquo;étude du projet ASTRAGALE est les structures maçonnées de la cathédrale, et pourra s\u0026rsquo;ouvrir dans un second temps à sa charpente.\nToutefois, les données produites par la variété des observations, représentations et interprétations sont extrêmement hétérogènes. À cela s\u0026rsquo;ajoute la complexité de l\u0026rsquo;existant, où l\u0026rsquo;unité de lieu et de temps disparaît entre les observations in situ des matériaux, le relevé d\u0026rsquo;un état structurel, les archives, les essais en laboratoire, les modèles numériques conçus pour l\u0026rsquo;étude du comportement mécanique. Il en résulte des processus méthodologiques linéaires disjoints plutôt que cycliques et connectés, en raison de verrous au niveau des interfaces entre relevés et modélisation ou analyse structurel et représentation.\nLe projet ASTRAGALE propose de connecter les informations spatialisées du relevé architectural au modèle structurel afin d\u0026rsquo;intégrer de manière cohérente les données d\u0026rsquo;étude. L\u0026rsquo;extraction des données issues des calculs et leur visualisation vise à confronter les altérations visibles aux faiblesses dues à des désordres internes ou des concentrations de charge rendues évidentes par le calcul structurel. Cette mise en relation ouvre à des applications d\u0026rsquo;apprentissage machine supervisé pour corréler les différents motifs d\u0026rsquo;altération. L\u0026rsquo;utilisation du modèle conceptuel de référence CIDOC CRM, du Web Annotation Data Model et l\u0026rsquo;attention portée à la démarche méthodologique garantissent un haut niveau d\u0026rsquo;interopérabilité et de reproductibilité.\nLa complémentarité des laboratoires partenaires s\u0026rsquo;était illustrée sur ce thème de recherche à travers l\u0026rsquo;ANR MONUMENTUM qui a bénéficié de l\u0026rsquo;expertise du MAP dans le relevé collaboratif et la construction d\u0026rsquo;une maquette numérique et du LMGC dans le calcul structurel par éléments discret, pour la production d\u0026rsquo;un socle conceptuel et technologique.\nLes différentes tâches seront segmentées selon le cycle de la donnée. Une attention particulière sera portée sur la gestion de la géométrie relevée et de sa transcription en un modèle géométrique pour le calcul de structure tandis qu\u0026rsquo;un environnement collaboratif sera mis en oeuvre dès les premières étapes de prototypage afin de construire un processus méthodologique d\u0026rsquo;analyse reproductible.\n"},{"id":14,"href":"/docs/3-cours/cyclescours/structuredesign/","title":"Ex Cathedrae - Conception de structures","section":"Cycles de cours","content":"Titre de l\u0026rsquo;enseignement : Concevoir des structures Niveau : Licence Type de cours : Cours magistral (ex cathedrae) Durée : 1h30 (format conférence) / 4x1h (format court) / 5x1h30 (format long) Langue : Fr\nMots-clefs # Principes structurels, Systèmes structurels, Conception de structure, Statique.\nRésumé # Qu\u0026rsquo;elle soit visible ou cachée, massive ou \u0026ldquo;en filigrane\u0026rdquo;, le choix de la structure pour un projet d\u0026rsquo;architecture accompagne le dessin de sa forme et de ses espaces. Ce cours propose un parcours parmi les systèmes structurels usuels, en humanisant l\u0026rsquo;approche typologique et systématique émise par H.Engels.\nContenu # L\u0026rsquo;introduction du cours Concevoir des Structures porte sur le rapport entre l\u0026rsquo;aspect mécanique et l\u0026rsquo;aspect spatial lors de la conception d\u0026rsquo;un tel système. Il en résulte que son dessin est contingenté, et que sur un tout autre plan, la prise en compte de ces mêmes contingences ouvre à la mise en oeuvre de plusieurs programmes esthétiques devenus classiques au fil des siècles. À travers ces derniers, la forme gagne en expressivité tout en se positionnant vis-à-vis des principes statiques et des phénomènes naturels qui les ont vus apparaître.\nLa division en quatre chapitres de ce cours correspond à quatre manières de rediriger les forces dans un système structurel. Un rappel de statique introduit chacun de ces chapitres, puis à la description générale des types de structures considérés s\u0026rsquo;ensuit un focus sur l\u0026rsquo;une d\u0026rsquo;entre elles.\nForme-Active : L\u0026rsquo;adaptation aux forces, travaillant exclusivement en traction ou en compression dans la structure. Ce chapitre traite des structures en câbles, réseaux de câbles à travers des exemples de passerelles dessinées par l\u0026rsquo;ingénieur Jurg Conzett. En son milieu, l\u0026rsquo;on inverse la courbe funiculaire pour détailler les structures en arche et voûtes soumises à la compression seule, illustrées par la construction de voûtes catalanes en début de siècle par Rafael Gustavino. Vecteur-Actif : La division des forces, travaillant en traction et en compression au sein de la structure. Ce chapitre traite des charpentes, progressant des systèmes pensés en plans aux treillis spatiaux. Cette progression est accompagnée par l\u0026rsquo;essor successif des fermes Polonceau et Ardant pour la couverture de bâtiments publics, par les charpentes bois de ponts et d\u0026rsquo;églises construites par les frères Grubenmann dans le canton d\u0026rsquo;Appenzell au XVIII^e^, par les cerfs-volants de Graham-Bell découvrant les bienfaits de la cellule tétraédrique. Section-Active : Le confinement des forces, travaillant en flexion dans la structure. Ce chapitre traite des portiques, des structures les plus répandues et les plus usuelles. Il se distingue des 3 autres en proposant un ensemble d\u0026rsquo;exercices interactifs sur le logiciel PushMePullMe, un simulateur de physique en temps réel. Surface-Active : La dispersion des forces, se répartissant selon des contraintes membranaires. Ce dernier chapitre traite des coques et voiles minces, mettant en perspective les questions de formes et de contingence de leur dessin abordées dans l\u0026rsquo;introduction et dans le premier chapitre. Le sujet se déplie à mesure que l\u0026rsquo;on considère des surfaces plus complexes, allant de la simple courbure, passant par la double jusqu\u0026rsquo;à discuter des surfaces de forme libre. Derrière cette progression, l\u0026rsquo;on peut lire en filigrane l\u0026rsquo;impact des dernières théories de calcul statique dans la conception et la possibilité de réalisation de ces formes. Soit en considérant les dômes de Schwedler et de l\u0026rsquo;observatoire Zeiss, les voiles minces d\u0026rsquo;Amérique du Sud avec Eladio Dieste/Felix Candela et les ouvertures que nous laissent percevoir les avancées scientifiques par des équipes de recherches tels le Block Research Group (BRG) La conclusion porte sur le dessin d\u0026rsquo;hybrides structurels, invitant à dépasser cette classification une fois plusieurs systèmes mis en oeuvre et maîtrisés.\nCompétences requises # Rudiments en statique ; Notions en conception de projet architectural. Acquis de la formation # Différencier les différents modes de sollicitations d\u0026rsquo;une structure ; Comprendre le déploiement d\u0026rsquo;une grille d\u0026rsquo;analyse sur un corpus de bâtiment ; Identifier le type d\u0026rsquo;un élément au sein d\u0026rsquo;une classification ; Reconnaître les aspects d\u0026rsquo;originalité d\u0026rsquo;oeuvres architecturales par le système structurel mis en oeuvre. Bibliographie synthétique # Engel, Heino. Structure Systems. 3ᵉ éd. Ostfildern: Hatje Cantz, 2007. Deplazes, Andrea, Leo Bietry, et Helene Cheminal. Construire l’architecture : Du matériau brut à l’édifice. 2eme ed. augmentée. Basel: Birkhauser, 2013. Muttoni, Aurelio. L’art des structures: Une introduction au fonctionnement des structures en architecture. 2ᵉ éd. Lausanne: PPUR, 2012. Von Meiss, Pierre. De la forme au lieu. Une introduction à l’étude de l’architecture. 5th éd. Presses Polytechniques et Universitaires Romandes (PPUR), 1993. Logiciel PushMePullMe (G. Senatore, 2014?) : https://expeditionworkshed.org/workshed/push-me-pull-me/ "},{"id":15,"href":"/docs/3-cours/cyclescours/releve/","title":"Ex Cathedrae - Méthodes et techniques de relevé architectural","section":"Cycles de cours","content":"Titre de l\u0026rsquo;enseignement : Méthodes de relevé en architecture Niveau : Type de cours : Cours magistral (ex cathedrae) Durée : 1x1h / 2x1h30 / 3x1h avec travaux dirigés Langue : Français / Anglais\nRésumé # Le cours Méthodes de relevé en architecture introduit la pratique du relevé architectural comme premier pas vers la connaissance d\u0026rsquo;un édifice. Après avoir débroussaillé la polysémie du terme entre les approches dites plastiques de celles pratiques, il précise le contenu de trois méthodes distinctes : le relevé schématique, le relevé topométrique et le relevé photographique.\nUn ensemble d\u0026rsquo;exemples issus de l\u0026rsquo;histoire de l\u0026rsquo;architecture, de l\u0026rsquo;histoire des techniques et de campagnes contemporaines remettent en perspectives les notions abordées. Elles illustrent ainsi une progression dans les techniques et ancrent les définitions données en introduction dans des cas réels.\nOutre les notions abordées, ce cours met en avant les bénéfices d\u0026rsquo;un relevé mixte analogique et numérique. Il a pour vocation de sensibiliser à l\u0026rsquo;interdisciplinarité en oeuvre dans la lecture d\u0026rsquo;un édifice qu\u0026rsquo;il soit ordinaire, à caractère patrimonial ou exceptionnel.\nn.b Au vu du sujet pratique engagé par ce cours ex cathedrae. Il est à envisager aux côtés, sinon en complément de séances de travaux dirigés et de travaux pratiques sur l\u0026rsquo;une ou toutes les méthodes mentionnées.\nMots-clefs # Théorie et pratique du relevé architectural, histoire des techniques, géométrie descriptive, photogrammétrie, lasergrammétrie, représentation en architecture, imagerie scientifique.\nContenu # L\u0026rsquo;introduction (I) permet de situer la place du relevé architectural au sein de sa discipline. Par la méthode des paires oppositionnelles, la polysémie du terme est mise au jour et nous permet de distinguer : a) le relevé analytique plastique, lecture dite sensible ou plastique d\u0026rsquo;une oeuvre bâtie ; b) la prise de mesures systématiques pour l\u0026rsquo;enregistrement daté de la réalité bâtie.\nLes premières parties (II-III) sont des généralités sur les différentes projections géométriques, les géométries engendrées sur le papier (point, ligne) et sur un écran (nuage de points, maillage, géométrie CAD et b-reps). Elles se concluent sur l\u0026rsquo;organisation et la bonne tenue d\u0026rsquo;une campagne de relevé.\nLe coeur du cours est concentré dans les trois parties dédiées aux trois types de relevé : le relevé schématique (IV), le relevé topométrique (V) et le relevé photographique (VI). Le premier désigne la prise méthodique de schémas et de croquis afin de traduire efficacement des informations morphologiques et typoliques d\u0026rsquo;un édifice. Le relevé topométrique est abordé de manière classique depuis la prise de côtes manuelles à l\u0026rsquo;utilisation du lidar. Enfin, une discussion sur le statut de la prise de photographie au sein du relevé introduit la VIe partie. Elle se poursuit par un détail de la prise de mesures par photogrammétrie.\nEnfin, la conclusion offre une synthèse sur le traitement des données, les modalités de représentation du bâti et une ouverture sur l\u0026rsquo;état de l\u0026rsquo;art des post-traitements.\nPlan du cours # I. Introduction : Technique et plastique de la représentation d\u0026rsquo;un édifice II. Géométrie II.A. Projections : Point, ligne et choucroute sur plan II.B. Espace virtuel : Point, ligne, maillage et spline sur LCD III. Campagne de relevé IV.A. Documentation IV.B. Reconnaissance IV.C. Généralités sur in situ et dépouillement IV. Relevé schématique III.A. Les croquis, illustré par les carnets de croquis d’Albert Laprade III.B. Les schémas, illustré par les typologie d’habitats vernaculaires V. Relevé topométrique V.A. Instrumentations V.B. Méthodes pour le relevé topométrique V.C. Fautes et Erreurs V.D. Deux relevés topométriques, Carcassonne et le château de la de la Petite Heuze aux Grandes Ventes VI. Relevé photographique VI.A. La photographie, entre image d’art et photogrammétrie VI.A.1. Prises de vue, dessin perspectif et photographie VI.A.2. Un protocole de relevé photographique, la mise en évidence des déviations verticales et irrégularités pour l\u0026rsquo;élaboration d\u0026rsquo;une théorie des raffinement par W.H. Goodman (1846-1923) VI.B. Levé de mesures par photogrammétrie VI.B.1. Géométrie épipolaire et processus photogrammétrique numérique VI.B.2. Détails d\u0026rsquo;un pipeline numérique contemporain VI.B.3. Quelques protocoles d\u0026rsquo;aquisition photogrammétrique VII. Conclusion : Traitement de données, Mise au propre, Représentation Bibliographie Acquis de la formation # Éléments théoriques pour l\u0026rsquo;élaboration d\u0026rsquo;un protocole de relevé hybride analogique/numérique ; Éléments spécifiques sur le relevé d\u0026rsquo;architecture par photogrammétrie et par lasergrammétrie ; Panorama sur la culture du relevé en architecture. Compétences requises # Prérequis en géométrie descriptive et en représentation de l\u0026rsquo;architecture. Bibliographie synthétique # Saint-Aubin, Jean-Paul, et Inventaire général des monuments et des richesses artistiques de la France. Le relevé et la représentation de l’architecture. Paris : Association Études, loisirs et patrimoine, 1992. Luca, Livio De. La photomodélisation architecturale: Relevé, modélisation et représentation d’édifices à partir de photographies. Paris: Eyrolles, 2009. "},{"id":16,"href":"/docs/3-cours/cyclescours/structureslegere/","title":"Intensif - Structures Légères","section":"Cycles de cours","content":"Titre de l\u0026rsquo;enseignement : Structures Légères Niveau : Master Type de cours : Intensif Durée : 25h réparties sur une semaine Langue : Fr\nEncadrement # Enseignants # Antoine Gros, architecte enseignant-chercheur, membre du MAP-GAMSAU ; Chiara Silvestri, architecte, enseignante-chercheuse. Résumé # Mots-clefs : Coques, Membranes, Résilles, Maquette numérique et analogique, changement de médium Et si, en ce lieu, l\u0026rsquo;on couvrait le plus d\u0026rsquo;espace possible avec le minimum de matière ? Pour cette semaine, exit la géométrie orthogonale et son festival de cubes. Les volumes se composeront par la dynamique de courbes tendues, comme autant de contrepoints aux légères cambures enveloppant les espaces. C\u0026rsquo;est un autre vocabulaire de formes que l\u0026rsquo;on explorera en maquette, en s\u0026rsquo;épargnant leur dessin fastidieux en par leur relevé photogrammétrique : technique qui d\u0026rsquo;une série de photographies du modèle physique les reconstruit en trois dimensions.\nContenu # ~1500c Barrière formelle, manipulation de géométries complexes \u0026ldquo;faciles à bâtir, difficiles à dessiner\u0026rdquo;, les outils numériques (orthogonalité et mur tout fait), porosité maquette analo/num, découverte de systèmes structurels.\nSite, en haut du fort saint jean\nCompétences requises # Élaboration d\u0026rsquo;un programme et développement critique d\u0026rsquo;une forme architecturale lui répondant ; Représentation architecturale, géométral et perspective. Acquis de la formation # Manipulation d\u0026rsquo;un vocabulaire formel : surfaces à simple et double courbure; Comprendre les contraintes physiques sur la matière et leur impact dans la production de forme ; Découverte et initiation au fonctionnement des systèmes structurels en coque continue/discontinue, en membrane tendue ; Initiation à la photogrammétrie d\u0026rsquo;objets de dimension moyenne (max 50x50x50cm) ; Transfert de la maquette physique à la maquette numérique. Méthode d\u0026rsquo;enseignement # +Travail effectué individuellement ou en groupe de deux ; +Cours introductifs : \u0026lsquo;Initiation aux structures légères\u0026rsquo; et \u0026lsquo;Initiation à la photogrammétrie\u0026rsquo; ; +Exploration en maquettes physiques.\nTravail attendu # Poster A1 représentant la structure conçue présentant les documents graphiques suivants :\nPlan masse au 1/200e ; Plan, Coupe, Élévation au 1/50e ; Une perspective ou isométrie ; Un texte : présentation du projet et du fonctionnement structurel. Méthode d\u0026rsquo;évaluation # contrôle continu (40%) soutenance orale, présentation du poster devant un jury (60%) "},{"id":17,"href":"/docs/1-cv/publications/","title":"Publications","section":"...CV","content":" Recherche # Pilotage et coordination de projets de recherche # Depuis 2021 : MITI-ASTRAGALE Vers un environnement numérique collaboratif pour l\u0026rsquo;analyse multimodale du comportement des structures. Cadre : MITI. Rôle : Responsable Depuis 2019 : FSP-REPERAGE : Repérage spatio-temporel des claveaux des nervures des voûtes effondrées de la cathédrale Notre-Dame de Paris. Cadre : FSP. Rôle : Co-Responsable. 2019-2020 : NDP-PRESTA Prestation d’études structurelles des voûtes de Notre-Dame de Paris. Cadre : RNDP, Chantier scientifique de NDP, GT-Structure/Numérique; Rôle : Coordination de la modélisation paramétrique. Participation à des projets de recherche # Depuis 2019 : Chantier Scientifique de la cathédrale Notre-Dame de Paris, membre du Groupe de Travail \u0026ldquo;Écosystème Numérique\u0026rdquo; 2017-2018 : ANR URBANIA : Repérage spatio-temporel des claveaux des nervures des voûtes effondrées de la cathédrale Notre-Dame de Paris. Cadre : ANR. Rôle : Ingénieur d’études. Revues internationales à comité de lecture # PARENT, Thomas, BROCATO, Maurizio, COLAS, Anne-Sophie, DOMÈDE, Nathalie, DUBOIS, Frédéric, GROS, Antoine, MOREL, Stéphane, MINDEGUIA, Jean-Christophe, MORENON, Pierre, NOUGAYREDE, Paul et TAFOREL, Paul, 2022. A multi-model structural analysis of the vaults of Notre-Dame de Paris cathedral after the 2019 fire and a proposal of a hybrid model merging continuous and discrete. Journal of Cultural Heritage. août 2022. Actes de colloques internationaux à comité de lecture # GROS, A., JACQUOT, K. et MESSAOUDI, T., 2019. Knowledge-Based Framework For Automatic Semantisation And Reconstruction Of Military Architecture On City-scale Models. In : ISPRS - International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences. Copernicus GmbH. 31 janvier 2019. Actes de colloques nationaux à comité de lecture # GROS, Antoine, 2022. Cartographie Sémantique des mémoires d\u0026rsquo;architecture de Lyon. In: SCAN ’22 : Séminaire de Conception Architecturale Numérique. octobre 2022. Article pierre à pierre GROS, Antoine, 2018. Émergence de Morphologies Pour l’acoustique Des Espaces de Performance. In : SCAN ’18 : Séminaire de Conception Architecturale Numérique. octobre 2018. Interventions non publiées dans des colloques / congrès (tables rondes, communications orales, affiches sans actes) # AQUILINA, Manuelle, LADURÉE, Jean-René, ABIVEN, Marie-Morgane, BLANC-GARIN, Noélie et GROS, Antoine, 2023. Table ronde des rencontres \u0026ldquo;Muséologie Metis\u0026rdquo; - Patrimoine et Numérique. 3e conférence Dexcupat - Metis. Conférence. Rennes. janvier 2023. GROS, Antoine et BAILLIEUL, Élise, 2022. Les claveaux de l’arc effondré de la nef, sujet de collaboration pour trois méthodes contemporaines d’anastylose. Journée d’études de la Structure Fédérative de Recherche « Patrimoine et Numérique ». Conférence. DRAC Amiens, France. 17 novembre 2022. GROS, Antoine, 2022. Méthodes et techniques numériques pour l’archéologie et l’histoire de l’art. . Conférence. Quimper, France. 23 juin 2022. GROS, Antoine, 2022. Trois méthodes contemporaines d’anastylose et leurs applications à l’arc doubleau effondré de Notre-Dame de Paris. . Conférence. Quimper, France. 24 juin 2022. GROS, Antoine, 2022. Résultats des collaborations entre le GT Numérique et le GT Pierre à travers le projet Repérage. Séminairedu chantier scientifique Notre-Dame CNRS/Ministère de la Culture. Conférence. Marseille, France. 28 mars 2022. CHANTIER SCIENTIFIQUE DE NOTRE-DAME DE PARIS, ZIMMER, Thierry, DE LUCA, Livio, LEROUX, Lise, GROS, Antoine, MONTFERRAN, Jean-Christophe et SALATKO, Gaspard, 2021. Table ronde sur l’étude des voûtes de Notre-Dame de Paris et de sa collection lapidaire. Séminaire Matérialités et Sacralités. Table Ronde. 21 octobre 2021. GROS, Antoine, 2021. Repérage, spatio-temporal relocation of a vault’s ribstones. Digital technologies in the Notre-dame de Paris Scientific Project. Conférence. Napoli, Italia. septembre 2021. GROS, Antoine et BAILLIEUL, Élise, 2021. Trois méthodes contemporaines d’anastylose et leurs applications à l’arc doubleau effondré de Notre-Dame de Paris. . Conférence. Université de Lille, France. 27 octobre 2021. Évènements et communcications à destination du grand public # AMOUROUX, Vincent. La face cachée de Notre-Dame. ZED pour ARTE France, avec la participation de CNRS Images, INRAP, Cité de l’Architecture \u0026amp; du Patrimoine. Printemps 2022. Disponible à l’adresse : https://www.zed.fr/fr/tv/production/catalogue/programme/repenser-notre-dame-de-paris GROS, Antoine, 2022. Reconstruire l’arc doubleau de Notre-Dame de Paris. Atelier. Colège des Bernardins, Paris, France. 27 avril 2022. GROS, Antoine, 2021. Les métiers de la recherche. Rebâtir Notre-Dame de Paris. Journées européennes du patrimoine 2021. Parvis de la cathédrale Notre-Dame de Paris. Paris. 19 septembre 2021. Enseignement (Sélection) # En sciences et techniques pour l\u0026rsquo;architecture # GROS, Antoine et FASSE-CALVET, Isabelle, 2020-2022. Séminaire de mémoire de master \u0026ldquo;Patrimoine Architectural et Humanités Numériques\u0026rdquo; GROS, Antoine et SIVESTRI, Chiara, 2020-2022. Intensif de master \u0026ldquo;Structures Légères\u0026rdquo; Intervention en travaux pratiques et travaux dirigés ENSAM(2020-2021) : Mécanique des structures (L1), Technologie et analyses des structures (L2), techniques de réhabilitation (M1), Analyse architecturale, structurelle et thermique (L3). Pédagogie et intervention en projet d\u0026rsquo;architecture EPFL(2018-2019) : atelier Y.Weinand (L3 \u0026amp; M1/M2) ; ENSAM(2020-2021) : atelier C.Marchiaro (L2), atelier F.Brugel (L3) atelier E.Breton (M1/M2) ; ENSAL(2021-) : atelier Ö.Lamontre-Berck (L3 \u0026amp; M1/M2) Formations post-diplôme # LABORATOIRE MAP CNRS UMR3495/MCC, 2022. Formation CNRS CFE. Post-traitement de campagnes de relevé photogrammétriques et lasergrammétriques. Génération de documents graphiques ad-hoc à partir d\u0026rsquo;un nuage de points post-traité. LABORATOIRE MAP CNRS UMR3495/MCC, 2022. Formation CNRS CFE. Post-traitement de campagnes de relevé photogrammétriques et lasergrammétriques Expositions et Ateliers # CAUE RHÔNE-MÉTROPOLE, . Exposition Territoires invisibles, histoires d’architectures et de paysages quotidiens LABORATOIRE EPFL ENAC-IBOIS, 2019. Exposition sur la pédagogie en oeuvre et sur les travaux des étudiants de l\u0026rsquo;atelier Weinand en Bachelor 3, Master 1 et Master 2. Exposition. Lausanne, Suisse. janvier-mars 2019. Valorisation et transfert # Participation à des initiatives de diffusion de la culture scientifique # GROS, Antoine, 2022. Conférence inaugurale pour les 20 ans du double cursus ingénieur/architecte à l\u0026rsquo;École Centrale de Lyon. École Centrale de Lyon, Ecully, France. 2 février 2022. "},{"id":18,"href":"/docs/3-cours/cyclescours/pahn/","title":"Séminaire - Patrimoine Architectural et Humanités Numériques","section":"Cycles de cours","content":"Titre de l\u0026rsquo;enseignement : Méthodes de relevé en architecture Niveau : Type de cours : Cours magistral (ex cathedrae) Durée : 1x1h / 2x1h30 / 3x1h avec travaux dirigés Langue : Français / Anglais\n"}]